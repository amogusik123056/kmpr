import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8089566253:AAGJSzNBhjgoEK5ZolkgIqH8a8Q99iPuu44"
ANON_GROUP_LINK = "https://t.me/+Ql0IZosRRu82YTQy"
ANON_GROUP_ID = -1002514617765
FORWARD_GROUP_ID = -1002698558394
VIDEO_LINK = "https://youtu.be/PQH1W_DRA7E"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
user_message_map = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    await update.message.reply_text(
        f"üõ† –¢–µ—Å—Ç –±–æ—Ç–∞:\n"
        f"‚Ä¢ ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {update.message.chat.id}\n"
        f"‚Ä¢ –ë–æ—Ç –∂–∏–≤ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
    if update.message.chat.type == "private":
        try:
            user = update.message.from_user
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {update.message.text or '–ú–µ–¥–∏–∞-—Ñ–∞–π–ª'}")

            test_msg = await context.bot.send_message(
                chat_id=update.message.chat.id,
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏..."
            )
            await test_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≥—Ä—É–ø–ø—É
            sent_msg = await context.bot.send_message(
                chat_id=ANON_GROUP_ID,
                text=f"‚úâÔ∏è –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ø–∞—Å–º–∞—Ç—Ä—èi–º–æ:", url=ANON_GROUP_LINK)]])
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
            user_message_map[sent_msg.message_id] = user.id
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_info = f"@{user.username} (ID: {user.id})" if user.username else f"ID: {user.id}"
            full_message = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}\n\n{update.message.text}" if update.message.text else f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"

            await context.bot.send_message(
                chat_id=FORWARD_GROUP_ID,
                text=full_message
            )
            
            await update.message.forward(FORWARD_GROUP_ID)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º! (–µ—Å–ª–µ —á–æ—Ç–∞ –Ω–∞–¥–∞ —Ç–æ @kmpr0)")

        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

async def handle_reply(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
        replied_msg_id = update.message.reply_to_message.message_id
        
        # –ò—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if replied_msg_id in user_message_map:
            original_sender_id = user_message_map[replied_msg_id]
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                reply_text = f"üîî –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}"
                await context.bot.send_message(
                    chat_id=original_sender_id,
                    text=reply_text
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
                if not update.message.text:
                    await context.bot.forward_message(
                        chat_id=original_sender_id,
                        from_chat_id=update.message.chat.id,
                        message_id=update.message.message_id
                    )
                
                logger.info(f"–û—Ç–≤–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_sender_id}")
                
            except TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_sender_id}: {e}")
                if "bot was blocked by the user" in str(e):
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("debug", debug))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    application.add_handler(MessageHandler(
        filters.Chat([ANON_GROUP_ID, FORWARD_GROUP_ID]) & 
        filters.REPLY, 
        handle_reply
    ))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
