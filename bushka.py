import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from math import radians, sin, cos, sqrt, atan2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8089566253:AAGJSzNBhjgoEK5ZolkgIqH8a8Q99iPuu44"
ANON_GROUP_LINK = "https://t.me/+Ql0IZosRRu82YTQy"
ANON_GROUP_ID = -1002514617765
FORWARD_GROUP_ID = -1002698558394

# –ì–µ–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞
TAGANROG_CENTER = (47.2364, 38.8953)
ALLOWED_RADIUS_KM = 50

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ
geo_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def calculate_distance(lat1, lon1, lat2, lon2):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)"""
    R = 6371
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    return R * (2 * atan2(sqrt(a), sqrt(1-a)))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:",
        reply_markup=geo_keyboard
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user = update.message.from_user
    location = update.message.location
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['location'] = {
        'lat': location.latitude,
        'lon': location.longitude,
        'distance': calculate_distance(
            TAGANROG_CENTER[0], TAGANROG_CENTER[1],
            location.latitude, location.longitude
        )
    }
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup.remove_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if 'location' not in context.user_data:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=geo_keyboard
        )
        return
    
    user = update.message.from_user
    location_data = context.user_data['location']
    distance = location_data['distance']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_msg = (
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{user.username or 'N/A'} (ID: {user.id})\n"
        f"üìç –ì–µ–æ: https://maps.google.com/?q={location_data['lat']},{location_data['lon']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –∫–º\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{update.message.text}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await context.bot.send_message(FORWARD_GROUP_ID, admin_msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
    if distance <= ALLOWED_RADIUS_KM:
        await context.bot.send_message(
            ANON_GROUP_ID,
            f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å", url=ANON_GROUP_LINK)]])
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –í—ã –≤–Ω–µ –∑–æ–Ω—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    
    # –£–¥–∞–ª—è–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    del context.user_data['location']
    await update.message.reply_text(
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=geo_keyboard
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
