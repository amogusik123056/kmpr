import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
from telegram.error import TelegramError
from math import radians, sin, cos, sqrt, atan2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8089566253:AAGJSzNBhjgoEK5ZolkgIqH8a8Q99iPuu44"
ANON_GROUP_LINK = "https://t.me/+Ql0IZosRRu82YTQy"
ANON_GROUP_ID = -1002514617765
FORWARD_GROUP_ID = -1002698558394
VIDEO_LINK = "https://youtu.be/PQH1W_DRA7E"

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¢–∞–≥–∞–Ω—Ä–æ–≥–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
TAGANROG_COORDS = (47.2364, 38.8953)
ALLOWED_DISTANCE_KM = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¢–∞–≥–∞–Ω—Ä–æ–≥–∞

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_message_map = {}
user_locations = {}  # –•—Ä–∞–Ω–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
location_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def calculate_distance(lat1, lon1, lat2, lon2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)"""
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return R * c

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    await update.message.reply_text(
        f"üõ† –¢–µ—Å—Ç –±–æ—Ç–∞:\n"
        f"‚Ä¢ ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {update.message.chat.id}\n"
        f"‚Ä¢ –ë–æ—Ç –∂–∏–≤ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã"
    )

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¢–∞–≥–∞–Ω—Ä–æ–≥–µ:",
        reply_markup=location_keyboard
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"""
    user = update.message.from_user
    location = update.message.location
    
    distance = calculate_distance(
        TAGANROG_COORDS[0], TAGANROG_COORDS[1],
        location.latitude, location.longitude
    )
    
    if distance <= ALLOWED_DISTANCE_KM:
        user_locations[user.id] = {
            'lat': location.latitude,
            'lon': location.longitude,
            'verified': True
        }
        await update.message.reply_text(
            "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup.remove_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –¢–∞–≥–∞–Ω—Ä–æ–≥–∞ ({distance:.1f} –∫–º). "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
            reply_markup=location_keyboard
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if update.message.chat.type != "private":
        return
    
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if user.id not in user_locations or not user_locations[user.id]['verified']:
        await request_location(update, context)
        return
    
    try:
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {update.message.text or '–ú–µ–¥–∏–∞-—Ñ–∞–π–ª'}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≥—Ä—É–ø–ø—É
        sent_msg = await context.bot.send_message(
            chat_id=ANON_GROUP_ID,
            text=f"‚úâÔ∏è –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ø–∞—Å–º–∞—Ç—Ä—èi–º–æ:", url=ANON_GROUP_LINK)]])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        user_message_map[sent_msg.message_id] = user.id
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        sender_info = f"@{user.username} (ID: {user.id})" if user.username else f"ID: {user.id}"
        location = user_locations[user.id]
        location_url = f"https://maps.google.com/?q={location['lat']},{location['lon']}"
        
        full_message = (
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location_url}\n\n"
            f"{update.message.text}" if update.message.text else 
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location_url}"
        )

        await context.bot.send_message(
            chat_id=FORWARD_GROUP_ID,
            text=full_message
        )
        
        await update.message.forward(FORWARD_GROUP_ID)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º! (–µ—Å–ª–µ —á–æ—Ç–∞ –Ω–∞–¥–∞ —Ç–æ @kmpr0)")

    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

async def handle_reply(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
        replied_msg_id = update.message.reply_to_message.message_id
        
        if replied_msg_id in user_message_map:
            original_sender_id = user_message_map[replied_msg_id]
            
            try:
                reply_text = f"üîî –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}"
                await context.bot.send_message(
                    chat_id=original_sender_id,
                    text=reply_text
                )
                
                if not update.message.text:
                    await context.bot.forward_message(
                        chat_id=original_sender_id,
                        from_chat_id=update.message.chat.id,
                        message_id=update.message.message_id
                    )
                
                logger.info(f"–û—Ç–≤–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_sender_id}")
                
            except TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_sender_id}: {e}")
                if "bot was blocked by the user" in str(e):
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("debug", debug))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_handler(MessageHandler(
        filters.Chat([ANON_GROUP_ID, FORWARD_GROUP_ID]) & 
        filters.REPLY, 
        handle_reply
    ))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
